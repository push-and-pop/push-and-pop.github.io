[{"title":"golang timer的坑","url":"/2024/12/31/golang-timer%E7%9A%84%E5%9D%91/","content":"package mainimport (\t&quot;fmt&quot;\t&quot;runtime&quot;\t&quot;time&quot;)type Manager struct &#123;\tptrTimer *time.Timer&#125;func main() &#123;\tfmt.Println(&quot;Main Begin Time:&quot;, time.Now().Format(&quot;15:04:05&quot;))\tmanager := &amp;Manager&#123;&#125;\truntime.SetFinalizer(manager, func(data *Manager) &#123;\t\tfmt.Printf(&quot;runtime invoke Finalizer manager, time: %s\\n&quot;, time.Now().Format(&quot;15:04:05&quot;))\t&#125;)\tLifeFunc(manager)\tmanager = nil\tfor &#123;\t\truntime.GC()\t\ttime.Sleep(1 * time.Second)\t&#125;&#125;func LifeFunc(manager *Manager) &#123;\tmanager.ptrTimer = DoWithDebug(manager)\t// manager.ptrTimer.Stop()\t// manager.ptrTimer = nil&#125;func DoWithDebug(manager *Manager) *time.Timer &#123;\ttimer := time.AfterFunc(30*time.Second, func() &#123;\t\t_ = manager // manager被闭包引用\t\tfmt.Printf(&quot;timer invoke : time: %s\\n&quot;, time.Now().Format(&quot;15:04:05&quot;))\t\t// ...logic\t&#125;)\truntime.SetFinalizer(timer, func(data *time.Timer) &#123;\t\tfmt.Printf(&quot;runtime invoke Finalizer timer: time: %s\\n&quot;, time.Now().Format(&quot;15:04:05&quot;))\t&#125;)\treturn timer&#125;\n\n\n\n总结本质是相互引用导致的内存泄漏，但是timer执行完或者stop也没有释放闭包里的引用也算是一个坑\n","tags":["golang"]},{"title":"update preview","url":"/2025/01/03/update-preview/","content":"\n \n好用的异步函数\n\n \n分布式系统的一致性确认\n\n\n  graph TD;\n      A-->B;\n      A-->C;\n      B-->D;\n      C-->D;"},{"title":"Hello World","url":"/2025/05/05/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"}]